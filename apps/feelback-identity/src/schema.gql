# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Cursor for paging through collections"""
scalar ConnectionCursor

"""Create a new (empty) identity"""
input CreateIdentityInput {
  """The pseudonym of the identity"""
  pseudonym: String!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

"""Identity resource for an anonymized patient"""
type Identity {
  """The ID of this resource."""
  id: ID!

  """DateTime when this resource was created."""
  createdAt: DateTime!

  """DateTime when this resource was last updated."""
  updatedAt: DateTime!

  """
  The version number of this resource (incremented each time this resource was updated).
  """
  version: Float!

  """The pseudonym of an identity."""
  pseudonym: String!

  """An academic title of this identity"""
  title: String

  """The firstname of this identity"""
  firstname: String

  """The lastname of this identity"""
  lastname: String
}

type IdentityConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [IdentityEdge!]!
}

type IdentityDeleteResponse {
  """The pseudonym of an identity."""
  pseudonym: String

  """An academic title of this identity"""
  title: String

  """The firstname of this identity"""
  firstname: String

  """The lastname of this identity"""
  lastname: String
}

type IdentityEdge {
  """The node containing the Identity"""
  node: Identity!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input IdentityFilter {
  and: [IdentityFilter!]
  or: [IdentityFilter!]
  pseudonym: StringFieldComparison
  firstname: StringFieldComparison
  lastname: StringFieldComparison
}

input IdentitySort {
  field: IdentitySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum IdentitySortFields {
  pseudonym
  firstname
  lastname
}

type Mutation {
  updateOneIdentity(
    """The id of the record to update"""
    id: ID!

    """The update to apply."""
    input: UpdateIdentityInput!
  ): Identity!
  createOneIdentity(
    """The record to create"""
    input: CreateIdentityInput!
  ): Identity!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type Query {
  identity(id: ID!): Identity
  identities(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: IdentityFilter = {}

    """Specify to sort results."""
    sorting: [IdentitySort!] = []
  ): IdentityConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

"""Update an Identity"""
input UpdateIdentityInput {
  """The (new) title of this identity"""
  title: String

  """The (new) firstname"""
  firstname: String

  """The (new) lastname"""
  lastname: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

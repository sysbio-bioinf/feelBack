# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateIdentityObject {
  pseudonym: String
  title: String
  firstname: String
  lastname: String
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type IdentityObject {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Float!
  pseudonym: String!
  title: String!
  firstname: String!
  lastname: String!
}

type IdentityObjectConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [IdentityObjectEdge!]!
}

type IdentityObjectDeleteResponse {
  pseudonym: String
  title: String
  firstname: String
  lastname: String
}

type IdentityObjectEdge {
  """The node containing the IdentityObject"""
  node: IdentityObject!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input IdentityObjectFilter {
  and: [IdentityObjectFilter!]
  or: [IdentityObjectFilter!]
  pseudonym: StringFieldComparison
  title: StringFieldComparison
  firstname: StringFieldComparison
  lastname: StringFieldComparison
}

input IdentityObjectSort {
  field: IdentityObjectSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum IdentityObjectSortFields {
  pseudonym
  title
  firstname
  lastname
}

type Mutation {
  deleteOneIdentityObject(
    """The id of the record to delete."""
    input: ID!
  ): IdentityObjectDeleteResponse!
  deleteManyIdentityObjects(
    """Filter to find records to delete"""
    input: IdentityObjectFilter!
  ): DeleteManyResponse!
  updateOneIdentityObject(
    """The id of the record to update"""
    id: ID!

    """The update to apply."""
    input: UpdateIdentityObject!
  ): IdentityObject!
  updateManyIdentityObjects(
    """Filter used to find fields to update"""
    filter: IdentityObjectFilter!

    """The update to apply to all records found using the filter"""
    input: UpdateIdentityObject!
  ): UpdateManyResponse!
  createOneIdentityObject(
    """The record to create"""
    input: CreateIdentityObject!
  ): IdentityObject!
  createManyIdentityObjects(
    """Array of records to create"""
    input: [CreateIdentityObject!]!
  ): [IdentityObject!]!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type Query {
  identityObject(id: ID!): IdentityObject
  identityObjects(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: IdentityObjectFilter = {}

    """Specify to sort results."""
    sorting: [IdentityObjectSort!] = []
  ): IdentityObjectConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input UpdateIdentityObject {
  pseudonym: String
  title: String
  firstname: String
  lastname: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

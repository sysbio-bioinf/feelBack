# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateOrganizationInput {
  name: String!
  description: String
  address: String
  phone: String
  email: String
  url: String
  logo: String
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type Mutation {
  deleteOneOrganization(
    """The id of the record to delete."""
    input: ID!
  ): OrganizationDeleteResponse!
  updateOneOrganization(
    """The id of the record to update"""
    id: ID!

    """The update to apply."""
    input: UpdateOrganizationInput!
  ): Organization!
  createOneOrganization(
    """The record to create"""
    input: CreateOrganizationInput!
  ): Organization!
}

type Organization {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Float!
  name: String!
  description: String
  address: String
  phone: String
  email: String
  url: String
  logo: String
}

type OrganizationConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrganizationEdge!]!
}

type OrganizationDeleteResponse {
  name: String
  description: String
  address: String
  phone: String
  email: String
  url: String
  logo: String
}

type OrganizationEdge {
  """The node containing the Organization"""
  node: Organization!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input OrganizationFilter {
  and: [OrganizationFilter!]
  or: [OrganizationFilter!]
  name: StringFieldComparison
}

input OrganizationSort {
  field: OrganizationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrganizationSortFields {
  name
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type Query {
  organization(id: ID!): Organization
  organizations(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: OrganizationFilter = {}

    """Specify to sort results."""
    sorting: [OrganizationSort!] = []
  ): OrganizationConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateOrganizationInput {
  name: String
  description: String
  address: String
  phone: String
  email: String
  url: String
  logo: String
}

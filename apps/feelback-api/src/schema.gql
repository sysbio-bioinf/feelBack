# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AccessToken {
  """the generated access token to work with the api"""
  accessToken: String!

  """the type of this token (e.g., BEARER)"""
  tokenType: String!

  """indicates, how long this token is valid (value in seconds)"""
  accessTokenExpiresIn: Float!

  """
  the generated refresh token that can be used to issue another access token
  """
  refreshToken: String!

  """indicates, how long this refresh token is valid (value in seconds)"""
  refreshTokenExpiresIn: Float!

  """the scopes used within this token"""
  scope: String!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateDoctor {
  """(Academic) title of this doctor"""
  title: String

  """Firstname of this doctor"""
  firstname: String

  """Lastname of this doctor"""
  lastname: String

  """The phone number of this doctor"""
  phone: String

  """An email address of this doctor"""
  email: String

  """The URL / website of this doctor"""
  url: String

  """The URL for the picture of this doctor"""
  picture: String

  """Settings for this user"""
  settings: JSONObject
}

"""Create a new Instrument"""
input CreateInstrumentInput {
  """The name of the instrument"""
  name: String!

  """The description of the instrument"""
  description: String

  """The type of the instrument"""
  type: String!

  """The logo as valid URL string)"""
  image: String

  """The payload / structure of the instrument"""
  payload: JSONObject
  rules: [RuleInput!]

  """what has changed so far"""
  changelog: String!
}

input CreateManyDoctorsInput {
  """Array of records to create"""
  doctors: [CreateDoctor!]!
}

input CreateManyInstrumentsInput {
  """Array of records to create"""
  instruments: [CreateInstrumentInput!]!
}

input CreateManyOrganizationsInput {
  """Array of records to create"""
  organizations: [CreateOrganizationInput!]!
}

input CreateManyPeopleInput {
  """Array of records to create"""
  people: [CreatePersonInput!]!
}

input CreateManyScreeningsInput {
  """Array of records to create"""
  screenings: [CreateScreeningInput!]!
}

input CreateOneDoctorInput {
  """The record to create"""
  doctor: CreateDoctor!
}

input CreateOneInstrumentInput {
  """The record to create"""
  instrument: CreateInstrumentInput!
}

input CreateOneOrganizationInput {
  """The record to create"""
  organization: CreateOrganizationInput!
}

input CreateOnePersonInput {
  """The record to create"""
  person: CreatePersonInput!
}

input CreateOnePersonInputType {
  """The record to create"""
  person: CreatePersonInput!
}

input CreateOneScreeningInput {
  """The record to create"""
  screening: CreateScreeningInput!
}

input CreateOrganizationInput {
  """The name of the organization"""
  name: String!

  """The description of the organization"""
  description: String

  """The type of the organization"""
  type: String!

  """The address of the organization"""
  address: String

  """The Phone number"""
  phone: String

  """The main email address"""
  email: String

  """The URL / Website of this organization"""
  url: String

  """The logo as valid URL string)"""
  logo: String
}

"""Create a new person"""
input CreatePersonInput {
  """the pseudonym to be applied"""
  pseudonym: String!
}

input CreateScreeningInput {
  """The instance ID (uuid v4) defined by the client"""
  instanceId: String!

  """DateTime when this screening was performed"""
  collectedAt: DateTime!

  """the collected data"""
  payload: JSONObject!

  """The language this screening was performed in"""
  language: String!

  """UserAgent Information of the device"""
  userAgent: CreateUserAgentInput
}

input CreateUserAgentInput {
  """The device type used for this request"""
  device: String

  """The OS used for this request"""
  os: String

  """The application version used for this request"""
  application: String
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteManyDoctorsInput {
  """Filter to find records to delete"""
  filter: DoctorFilter!
}

input DeleteManyInstrumentsInput {
  """Filter to find records to delete"""
  filter: InstrumentFilter!
}

input DeleteManyOrganizationsInput {
  """Filter to find records to delete"""
  filter: OrganizationFilter!
}

input DeleteManyPeopleInput {
  """Filter to find records to delete"""
  filter: PersonFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyScreeningsInput {
  """Filter to find records to delete"""
  filter: ScreeningFilter!
}

input DeleteOneInput {
  """The id of the record to delete."""
  id: ID!
}

"""A Doctor, Psychologist or Caregiver"""
type Doctor {
  """The ID of this resource."""
  id: ID!

  """DateTime when this resource was created."""
  createdAt: DateTime!

  """DateTime when this resource was last updated."""
  updatedAt: DateTime!

  """
  The version number of this resource (incremented each time this resource was updated).
  """
  version: Float!

  """(Academic) title of this doctor"""
  title: String

  """Firstname of this doctor"""
  firstname: String

  """Lastname of this doctor"""
  lastname: String

  """The phone number of this doctor"""
  phone: String

  """An email address of this doctor"""
  email: String

  """The URL / website of this doctor"""
  url: String

  """The URL for the picture of this doctor"""
  picture: String

  """Settings for this user"""
  settings: JSONObject!
  organizations(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: OrganizationFilter = {}

    """Specify to sort results."""
    sorting: [OrganizationSort!] = []
  ): OrganizationConnection
}

type DoctorConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [DoctorEdge!]!
}

type DoctorDeleteResponse {
  """(Academic) title of this doctor"""
  title: String

  """Firstname of this doctor"""
  firstname: String

  """Lastname of this doctor"""
  lastname: String

  """The phone number of this doctor"""
  phone: String

  """An email address of this doctor"""
  email: String

  """The URL / website of this doctor"""
  url: String

  """The URL for the picture of this doctor"""
  picture: String

  """Settings for this user"""
  settings: JSONObject
}

type DoctorEdge {
  """The node containing the Doctor"""
  node: Doctor!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input DoctorFilter {
  and: [DoctorFilter!]
  or: [DoctorFilter!]
  firstname: StringFieldComparison
  lastname: StringFieldComparison
}

input DoctorSort {
  field: DoctorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DoctorSortFields {
  firstname
  lastname
}

type Evaluation {
  """the name of the rule"""
  name: String!

  """the expression that was used to evaluate the data"""
  expression: String!

  """the headline to be displayed if this rule is true"""
  headline: String!

  """the text to be displayed if this rule is true"""
  text: String!

  """The boolean result of the evaluation, NULL = failure"""
  result: Boolean
}

"""An Instrument resource for a survey"""
type Instrument {
  """The ID of this resource."""
  id: ID!

  """DateTime when this resource was created."""
  createdAt: DateTime!

  """DateTime when this resource was last updated."""
  updatedAt: DateTime!

  """
  The version number of this resource (incremented each time this resource was updated).
  """
  version: Float!

  """The name of this instrument"""
  name: String!

  """A description for this instrument"""
  description: String

  """The type of this instrument"""
  type: String!

  """An image / icon URL for this instrument"""
  image: String

  """The actual payload / content / structure of this instrument"""
  payload: JSONObject

  """rules that are applied to calculate some kind of result"""
  rules: [JSONObject!]

  """the changelog of this instrument (i.e., what has been changed)"""
  changelog: String!
  screenings(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ScreeningFilter = {}

    """Specify to sort results."""
    sorting: [ScreeningSort!] = []
  ): ScreeningConnection
}

type InstrumentConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [InstrumentEdge!]!
}

type InstrumentDeleteResponse {
  """The name of this instrument"""
  name: String

  """A description for this instrument"""
  description: String

  """The type of this instrument"""
  type: String

  """An image / icon URL for this instrument"""
  image: String

  """The actual payload / content / structure of this instrument"""
  payload: JSONObject

  """rules that are applied to calculate some kind of result"""
  rules: [JSONObject!]

  """the changelog of this instrument (i.e., what has been changed)"""
  changelog: String
}

type InstrumentEdge {
  """The node containing the Instrument"""
  node: Instrument!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input InstrumentFilter {
  and: [InstrumentFilter!]
  or: [InstrumentFilter!]
  name: StringFieldComparison
  type: StringFieldComparison
}

input InstrumentSort {
  field: InstrumentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InstrumentSortFields {
  name
  type
}

"""
The JSONObject scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""Credentials to login"""
input LoginInput {
  """The email to login with"""
  email: String!

  """The password to login with"""
  password: String!
}

type Mutation {
  updateOneDoctor(input: UpdateOneDoctorInput!): Doctor!
  updateOnePerson(input: UpdateOnePersonInput!): Person!
  createOneScreening(input: CreateOneScreeningInput!): Screening!
  setInstrumentOnScreening(input: RelationInput!): Screening!
  setPersonOnScreening(input: RelationInput!): Screening!
  updateOneInstrument(input: UpdateOneInstrumentInput!): Instrument!
  createOneInstrument(input: CreateOneInstrumentInput!): Instrument!
  updateOneOrganization(input: UpdateOneOrganizationInput!): Organization!
  createOneOrganization(input: CreateOneOrganizationInput!): Organization!
  addMembersToOrganization(input: RelationsInput!): Organization!
  resolveScreeningIssues(input: ResolveOneScreeningInputType!): Screening!
  createOnePerson(input: CreateOnePersonInputType!): Person!

  """login via username / password"""
  login(input: LoginInput!): AccessToken!
}

"""An Organization resource"""
type Organization {
  """The ID of this resource."""
  id: ID!

  """DateTime when this resource was created."""
  createdAt: DateTime!

  """DateTime when this resource was last updated."""
  updatedAt: DateTime!

  """
  The version number of this resource (incremented each time this resource was updated).
  """
  version: Float!

  """Name of the organization"""
  name: String!

  """A description of this organization"""
  description: String

  """Type (hospital, service center, ...) of the organization"""
  type: String!

  """The address of this organization"""
  address: String

  """The phone number of this organization"""
  phone: String

  """An email address of this organization"""
  email: String

  """The URL / website of this organization"""
  url: String

  """The URL for the logo of this organization"""
  logo: String
  members(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: DoctorFilter = {}

    """Specify to sort results."""
    sorting: [DoctorSort!] = []
  ): DoctorConnection
}

type OrganizationConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrganizationEdge!]!
}

type OrganizationDeleteResponse {
  """Name of the organization"""
  name: String

  """A description of this organization"""
  description: String

  """Type (hospital, service center, ...) of the organization"""
  type: String

  """The address of this organization"""
  address: String

  """The phone number of this organization"""
  phone: String

  """An email address of this organization"""
  email: String

  """The URL / website of this organization"""
  url: String

  """The URL for the logo of this organization"""
  logo: String
}

type OrganizationEdge {
  """The node containing the Organization"""
  node: Organization!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input OrganizationFilter {
  and: [OrganizationFilter!]
  or: [OrganizationFilter!]
  name: StringFieldComparison
  type: StringFieldComparison
}

input OrganizationSort {
  field: OrganizationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrganizationSortFields {
  name
  type
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

"""A person"""
type Person {
  """The ID of this resource."""
  id: ID!

  """DateTime when this resource was created."""
  createdAt: DateTime!

  """DateTime when this resource was last updated."""
  updatedAt: DateTime!

  """
  The version number of this resource (incremented each time this resource was updated).
  """
  version: Float!

  """the pseudonym of the person"""
  pseudonym: String!

  """indicates if the TOS were accepted"""
  acceptedTOS: Boolean!
}

type PersonConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PersonEdge!]!
}

type PersonDeleteResponse {
  """the pseudonym of the person"""
  pseudonym: String

  """indicates if the TOS were accepted"""
  acceptedTOS: Boolean
}

type PersonEdge {
  """The node containing the Person"""
  node: Person!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input PersonFilter {
  and: [PersonFilter!]
  or: [PersonFilter!]
  pseudonym: StringFieldComparison
}

input PersonSort {
  field: PersonSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PersonSortFields {
  pseudonym
}

type Query {
  doctor(id: ID!): Doctor
  doctors(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: DoctorFilter = {}

    """Specify to sort results."""
    sorting: [DoctorSort!] = []
  ): DoctorConnection!
  person(id: ID!): Person
  people(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PersonFilter = {}

    """Specify to sort results."""
    sorting: [PersonSort!] = []
  ): PersonConnection!
  screening(id: ID!): Screening
  screenings(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ScreeningFilter = {}

    """Specify to sort results."""
    sorting: [ScreeningSort!] = []
  ): ScreeningConnection!
  instrument(id: ID!): Instrument
  instruments(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: InstrumentFilter = {}

    """Specify to sort results."""
    sorting: [InstrumentSort!] = []
  ): InstrumentConnection!
  organization(id: ID!): Organization
  organizations(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: OrganizationFilter = {}

    """Specify to sort results."""
    sorting: [OrganizationSort!] = []
  ): OrganizationConnection!
}

input RelationInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RelationsInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input ResolveOneScreeningInputType {
  """id"""
  id: String!

  """The update to apply."""
  update: ResolveScreeningInput!
}

input ResolveScreeningInput {
  """comments for resolving this issue"""
  resolveComment: String!

  """Date this issue was resolved"""
  resolvedAt: DateTime!
}

input RuleInput {
  """the name of the rule"""
  name: String!

  """the (boolean) expression of the rule"""
  expression: String!

  """the headline to be shown if the rule evaluates positive (true)"""
  headline: String!

  """the text to be shown if the rule evaluates positive (true)"""
  text: String!
}

"""A processed screening"""
type Screening {
  """The ID of this resource."""
  id: ID!

  """DateTime when this resource was created."""
  createdAt: DateTime!

  """DateTime when this resource was last updated."""
  updatedAt: DateTime!

  """
  The version number of this resource (incremented each time this resource was updated).
  """
  version: Float!

  """Instance ID (uuid v4) defined by the client"""
  instanceId: String!

  """DateTime when this screening was performed."""
  collectedAt: DateTime!

  """The language this screening was performed in"""
  language: String!

  """the screening data (filled in questionnaires)"""
  payload: JSONObject!

  """if the screening issues has been resolved"""
  isResolved: Boolean

  """DateTime when the screening issues has been resolved."""
  resolvedAt: DateTime!

  """data about resolving the screening issues"""
  resolveComment: String
  instrument: Instrument
  person: Person

  """UserAgent information"""
  userAgent: UserAgent

  """Evaluation Results for this screening"""
  evaluationResult: [Evaluation!]
}

type ScreeningConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ScreeningEdge!]!
}

type ScreeningDeleteResponse {
  """Instance ID (uuid v4) defined by the client"""
  instanceId: String

  """DateTime when this screening was performed."""
  collectedAt: DateTime

  """The language this screening was performed in"""
  language: String

  """the screening data (filled in questionnaires)"""
  payload: JSONObject

  """if the screening issues has been resolved"""
  isResolved: Boolean

  """DateTime when the screening issues has been resolved."""
  resolvedAt: DateTime

  """data about resolving the screening issues"""
  resolveComment: String
}

type ScreeningEdge {
  """The node containing the Screening"""
  node: Screening!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input ScreeningFilter {
  and: [ScreeningFilter!]
  or: [ScreeningFilter!]
  instanceId: StringFieldComparison
  collectedAt: DateFieldComparison
  language: StringFieldComparison
  isResolved: BooleanFieldComparison
  resolvedAt: DateFieldComparison
}

input ScreeningSort {
  field: ScreeningSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ScreeningSortFields {
  instanceId
  collectedAt
  language
  isResolved
  resolvedAt
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input UpdateDoctorInput {
  """(Academic) title of this doctor"""
  title: String

  """Firstname of this doctor"""
  firstname: String

  """Lastname of this doctor"""
  lastname: String

  """The phone number of this doctor"""
  phone: String

  """An email address of this doctor"""
  email: String

  """The URL / website of this doctor"""
  url: String

  """The URL for the picture of this doctor"""
  picture: String

  """custom settings as json object"""
  settings: JSONObject!
}

"""Update an existing Instrument"""
input UpdateInstrumentInput {
  """The (new) name of this instrument"""
  name: String

  """The (new) description of this instrument"""
  description: String

  """The type of the instrument"""
  type: String!

  """The logo as valid URL string)"""
  image: String

  """The (new) payload / structure of the instrument"""
  payload: JSONObject
  rules: [RuleInput!]

  """what has changed so far"""
  changelog: String!
}

input UpdateManyDoctorsInput {
  """Filter used to find fields to update"""
  filter: DoctorFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDoctorInput!
}

input UpdateManyInstrumentsInput {
  """Filter used to find fields to update"""
  filter: InstrumentFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInstrumentInput!
}

input UpdateManyOrganizationsInput {
  """Filter used to find fields to update"""
  filter: OrganizationFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOrganizationInput!
}

input UpdateManyPeopleInput {
  """Filter used to find fields to update"""
  filter: PersonFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePersonInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyScreeningsInput {
  """Filter used to find fields to update"""
  filter: ScreeningFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateScreening!
}

input UpdateOneDoctorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDoctorInput!
}

input UpdateOneInstrumentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInstrumentInput!
}

input UpdateOneOrganizationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrganizationInput!
}

input UpdateOnePersonInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePersonInput!
}

input UpdateOneScreeningInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ResolveScreeningInput!
}

input UpdateOrganizationInput {
  """The (new) name of the organization"""
  name: String

  """The (new) description of the organization"""
  description: String

  """The (new) type of the organization"""
  type: String

  """The (new) address"""
  address: String

  """The (new) phone number"""
  phone: String

  """The (new) email address"""
  email: String

  """The (new) URL"""
  url: String

  """The (new) logo URL"""
  logo: String
}

"""Update a person"""
input UpdatePersonInput {
  """if the person has accepted the TOS"""
  acceptedTOS: Boolean!
}

input UpdateScreening {
  """Instance ID (uuid v4) defined by the client"""
  instanceId: String

  """DateTime when this screening was performed."""
  collectedAt: DateTime

  """The language this screening was performed in"""
  language: String

  """the screening data (filled in questionnaires)"""
  payload: JSONObject

  """if the screening issues has been resolved"""
  isResolved: Boolean

  """DateTime when the screening issues has been resolved."""
  resolvedAt: DateTime

  """data about resolving the screening issues"""
  resolveComment: String
}

type UserAgent {
  """The device type used for this request"""
  device: String

  """The OS used for this request"""
  os: String

  """The application version used for this request"""
  application: String
}
